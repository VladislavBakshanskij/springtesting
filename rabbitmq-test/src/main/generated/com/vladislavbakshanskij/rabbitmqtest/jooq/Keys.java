/*
 * This file is generated by jOOQ.
 */
package com.vladislavbakshanskij.rabbitmqtest.jooq;


import com.vladislavbakshanskij.rabbitmqtest.jooq.tables.Author;
import com.vladislavbakshanskij.rabbitmqtest.jooq.tables.Book;
import com.vladislavbakshanskij.rabbitmqtest.jooq.tables.Databasechangeloglock;
import com.vladislavbakshanskij.rabbitmqtest.jooq.tables.Journal;
import com.vladislavbakshanskij.rabbitmqtest.jooq.tables.records.AuthorRecord;
import com.vladislavbakshanskij.rabbitmqtest.jooq.tables.records.BookRecord;
import com.vladislavbakshanskij.rabbitmqtest.jooq.tables.records.DatabasechangeloglockRecord;
import com.vladislavbakshanskij.rabbitmqtest.jooq.tables.records.JournalRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> AUTHOR_ID_PK = Internal.createUniqueKey(Author.AUTHOR, DSL.name("author_id_pk"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<BookRecord> BOOK_ID_PK = Internal.createUniqueKey(Book.BOOK, DSL.name("book_id_pk"), new TableField[] { Book.BOOK.ID }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<JournalRecord> JOURNAL_ID_PK = Internal.createUniqueKey(Journal.JOURNAL, DSL.name("journal_id_pk"), new TableField[] { Journal.JOURNAL.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BookRecord, AuthorRecord> BOOK__AUTHOR_ID_FK = Internal.createForeignKey(Book.BOOK, DSL.name("author_id_fk"), new TableField[] { Book.BOOK.AUTHOR_ID }, Keys.AUTHOR_ID_PK, new TableField[] { Author.AUTHOR.ID }, true);
}
