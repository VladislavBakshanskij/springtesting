/*
 * This file is generated by jOOQ.
 */
package com.vladislavbakshanskij.rabbitmqtest.jooq.tables;


import com.vladislavbakshanskij.rabbitmqtest.jooq.Keys;
import com.vladislavbakshanskij.rabbitmqtest.jooq.Public;
import com.vladislavbakshanskij.rabbitmqtest.jooq.tables.records.JournalRecord;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Journal extends TableImpl<JournalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.journal</code>
     */
    public static final Journal JOURNAL = new Journal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JournalRecord> getRecordType() {
        return JournalRecord.class;
    }

    /**
     * The column <code>public.journal.id</code>.
     */
    public final TableField<JournalRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.journal.action</code>.
     */
    public final TableField<JournalRecord, String> ACTION = createField(DSL.name("action"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.journal.tableName</code>.
     */
    public final TableField<JournalRecord, String> TABLENAME = createField(DSL.name("tableName"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.journal.objectState</code>.
     */
    public final TableField<JournalRecord, JSONB> OBJECTSTATE = createField(DSL.name("objectState"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.journal.update_date</code>.
     */
    public final TableField<JournalRecord, OffsetDateTime> UPDATE_DATE = createField(DSL.name("update_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Journal(Name alias, Table<JournalRecord> aliased) {
        this(alias, aliased, null);
    }

    private Journal(Name alias, Table<JournalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.journal</code> table reference
     */
    public Journal(String alias) {
        this(DSL.name(alias), JOURNAL);
    }

    /**
     * Create an aliased <code>public.journal</code> table reference
     */
    public Journal(Name alias) {
        this(alias, JOURNAL);
    }

    /**
     * Create a <code>public.journal</code> table reference
     */
    public Journal() {
        this(DSL.name("journal"), null);
    }

    public <O extends Record> Journal(Table<O> child, ForeignKey<O, JournalRecord> key) {
        super(child, key, JOURNAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<JournalRecord> getPrimaryKey() {
        return Keys.JOURNAL_ID_PK;
    }

    @Override
    public Journal as(String alias) {
        return new Journal(DSL.name(alias), this);
    }

    @Override
    public Journal as(Name alias) {
        return new Journal(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Journal rename(String name) {
        return new Journal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Journal rename(Name name) {
        return new Journal(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, String, JSONB, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
