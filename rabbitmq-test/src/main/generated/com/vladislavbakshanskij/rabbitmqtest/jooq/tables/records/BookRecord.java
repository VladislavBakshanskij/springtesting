/*
 * This file is generated by jOOQ.
 */
package com.vladislavbakshanskij.rabbitmqtest.jooq.tables.records;


import com.vladislavbakshanskij.rabbitmqtest.jooq.tables.Book;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookRecord extends UpdatableRecordImpl<BookRecord> implements Record4<UUID, String, UUID, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.book.id</code>.
     */
    public BookRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.book.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.book.title</code>.
     */
    public BookRecord setTitle(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.book.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.book.author_id</code>.
     */
    public BookRecord setAuthorId(UUID value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.book.author_id</code>.
     */
    public UUID getAuthorId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>public.book.date_created</code>.
     */
    public BookRecord setDateCreated(OffsetDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.book.date_created</code>.
     */
    public OffsetDateTime getDateCreated() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, UUID, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, UUID, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Book.BOOK.ID;
    }

    @Override
    public Field<String> field2() {
        return Book.BOOK.TITLE;
    }

    @Override
    public Field<UUID> field3() {
        return Book.BOOK.AUTHOR_ID;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return Book.BOOK.DATE_CREATED;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getTitle();
    }

    @Override
    public UUID component3() {
        return getAuthorId();
    }

    @Override
    public OffsetDateTime component4() {
        return getDateCreated();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getTitle();
    }

    @Override
    public UUID value3() {
        return getAuthorId();
    }

    @Override
    public OffsetDateTime value4() {
        return getDateCreated();
    }

    @Override
    public BookRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public BookRecord value2(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public BookRecord value3(UUID value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public BookRecord value4(OffsetDateTime value) {
        setDateCreated(value);
        return this;
    }

    @Override
    public BookRecord values(UUID value1, String value2, UUID value3, OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BookRecord
     */
    public BookRecord() {
        super(Book.BOOK);
    }

    /**
     * Create a detached, initialised BookRecord
     */
    public BookRecord(UUID id, String title, UUID authorId, OffsetDateTime dateCreated) {
        super(Book.BOOK);

        setId(id);
        setTitle(title);
        setAuthorId(authorId);
        setDateCreated(dateCreated);
    }
}
